{"ast":null,"code":"var _jsxFileName = \"D:\\\\WEB--DEVELOPMENT\\\\REACT\\\\Netflix_Clone\\\\netflix-clone\\\\src\\\\Row.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport YouTube from 'react-youtube';\nimport MTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst baseurl = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row({\n  title,\n  url,\n  isLargerRow\n}) {\n  _s();\n\n  const [trailerUrl, upTrailerUrl] = useState();\n  const [movie, upMovie] = useState([]);\n  useEffect(() => {\n    const func = async () => {\n      // const api_Key=`b1bcd518764c9ced91d1c21adad8eb44`;\n      const res = await axios.get(`${url}`);\n      upMovie(res.data.results); // return jsonRes;\n    };\n\n    func();\n  }, [url]);\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n\n  const imgTrailer = val => {\n    if (trailerUrl) {\n      upTrailerUrl('');\n    } else {\n      MTrailer((val === null || val === void 0 ? void 0 : val.name) || (val === null || val === void 0 ? void 0 : val.title) || (val === null || val === void 0 ? void 0 : val.orignal_name) || '').then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        upTrailerUrl(urlParams.get(\"v\"));\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_main\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"row_heading\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row_inner\",\n        children: movie.map(val => {\n          return /*#__PURE__*/_jsxDEV(\"img\", {\n            onClick: () => {\n              imgTrailer(val);\n            },\n            className: isLargerRow ? 'poster_img' : 'poster_path',\n            src: `${baseurl}${isLargerRow ? val.poster_path : val.backdrop_path}`,\n            alt: val.original_title\n          }, val.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: \"https://youtu.be/KRQb74Cr9N0\",\n        opts: opts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Row, \"4v7Hzf9VB4JxPZwiguFEaTt6tAU=\");\n\n_c = Row;\nexport default Row; // https://image.tmdb.org/t/p/orignal/pci1ArYW7oJ2eyTo2NMYEKHHiCP.jpg\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["D:/WEB--DEVELOPMENT/REACT/Netflix_Clone/netflix-clone/src/Row.jsx"],"names":["React","useEffect","useState","axios","YouTube","MTrailer","baseurl","Row","title","url","isLargerRow","trailerUrl","upTrailerUrl","movie","upMovie","func","res","get","data","results","opts","height","width","playerVars","autoplay","imgTrailer","val","name","orignal_name","then","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","backdrop_path","original_title","id"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,QAAP,MAAqB,eAArB;;;AAEA,MAAMC,OAAO,GAAG,qCAAhB;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA,GAAT;AAAcC,EAAAA;AAAd,CAAb,EAA0C;AAAA;;AACxC,QAAM,CAACC,UAAD,EAAcC,YAAd,IAA4BV,QAAQ,EAA1C;AACA,QAAM,CAACW,KAAD,EAAQC,OAAR,IAAmBZ,QAAQ,CAAC,EAAD,CAAjC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,IAAI,GAAG,YAAY;AACvB;AACA,YAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAW,GAAER,GAAI,EAAjB,CAAlB;AACAK,MAAAA,OAAO,CAACE,GAAG,CAACE,IAAJ,CAASC,OAAV,CAAP,CAHuB,CAIvB;AACD,KALD;;AAMAJ,IAAAA,IAAI;AACL,GARQ,EAQN,CAACN,GAAD,CARM,CAAT;AAUA,QAAMW,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,KAAK,EAAE,MAFI;AAGXC,IAAAA,UAAU,EAAE;AACV;AACAC,MAAAA,QAAQ,EAAE;AAFA;AAHD,GAAb;;AAQA,QAAMC,UAAU,GAAGC,GAAD,IAAO;AACvB,QAAGf,UAAH,EAAc;AACZC,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACD,KAFD,MAGI;AACFP,MAAAA,QAAQ,CAAC,CAAAqB,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEC,IAAL,MAAaD,GAAb,aAAaA,GAAb,uBAAaA,GAAG,CAAElB,KAAlB,MAA2BkB,GAA3B,aAA2BA,GAA3B,uBAA2BA,GAAG,CAAEE,YAAhC,KAA8C,EAA/C,CAAR,CACCC,IADD,CACOpB,GAAD,IAAO;AACX,cAAMqB,SAAS,GAAC,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQvB,GAAR,EAAawB,MAAjC,CAAhB;AACArB,QAAAA,YAAY,CAACkB,SAAS,CAACb,GAAV,CAAc,GAAd,CAAD,CAAZ;AACD,OAJD,EAKCiB,KALD,CAKQC,KAAD,IAAS;AAACC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAAmB,OALpC;AAMD;AACF,GAZD;;AAcA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA,kBAA6B3B;AAA7B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,kBACGK,KAAK,CAACyB,GAAN,CAAWZ,GAAD,IAAS;AAClB,8BAAQ;AAAK,YAAA,OAAO,EAAE,MAAI;AAACD,cAAAA,UAAU,CAACC,GAAD,CAAV;AAAgB,aAAnC;AAAkD,YAAA,SAAS,EAAEhB,WAAW,GAAG,YAAH,GAAkB,aAA1F;AAAyG,YAAA,GAAG,EAAG,GAAEJ,OAAQ,GAAEI,WAAW,GAAGgB,GAAG,CAACa,WAAP,GAAqBb,GAAG,CAACc,aAAc,EAA7K;AAAgL,YAAA,GAAG,EAAEd,GAAG,CAACe;AAAzL,aAA0Cf,GAAG,CAACgB,EAA9C;AAAA;AAAA;AAAA;AAAA,kBAAR;AACD,SAFA;AADH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAUE;AAAA,gBACG/B,UAAU,iBAAI,QAAC,OAAD;AAAS,QAAA,OAAO,EAAC,8BAAjB;AAAgD,QAAA,IAAI,EAAES;AAAtD;AAAA;AAAA;AAAA;AAAA;AADjB;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA,kBADF;AAgBD;;GAnDQb,G;;KAAAA,G;AAqDT,eAAeA,GAAf,C,CACA","sourcesContent":["import { React, useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport YouTube from 'react-youtube';\r\nimport MTrailer from 'movie-trailer';\r\n\r\nconst baseurl = \"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction Row({ title, url, isLargerRow }) {\r\n  const [trailerUrl,  upTrailerUrl]=useState();\r\n  const [movie, upMovie] = useState([]);\r\n  useEffect(() => {\r\n    const func = async () => {\r\n      // const api_Key=`b1bcd518764c9ced91d1c21adad8eb44`;\r\n      const res = await axios.get(`${url}`)\r\n      upMovie(res.data.results)\r\n      // return jsonRes;\r\n    }\r\n    func();\r\n  }, [url]);\r\n\r\n  const opts = {\r\n    height: '390',\r\n    width: '100%',\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  };\r\n  const imgTrailer =(val)=>{\r\n    if(trailerUrl){\r\n      upTrailerUrl('')\r\n    }\r\n    else{\r\n      MTrailer(val?.name || val?.title || val?.orignal_name||'')\r\n      .then((url)=>{\r\n        const urlParams=new URLSearchParams(new URL(url).search);\r\n        upTrailerUrl(urlParams.get(\"v\"));\r\n      })\r\n      .catch((error)=>{console.log(error)})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='row_main'>\r\n        <h2 className='row_heading'>{title}</h2>\r\n        <div className=\"row_inner\">\r\n          {movie.map((val) => {\r\n            return (<img onClick={()=>{imgTrailer(val)}} key={val.id} className={isLargerRow ? 'poster_img' : 'poster_path'} src={`${baseurl}${isLargerRow ? val.poster_path : val.backdrop_path}`} alt={val.original_title} />);\r\n          })}\r\n\r\n        </div>\r\n      </div>\r\n      <div>\r\n        {trailerUrl && <YouTube videoId='https://youtu.be/KRQb74Cr9N0' opts={opts} />}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row;\r\n// https://image.tmdb.org/t/p/orignal/pci1ArYW7oJ2eyTo2NMYEKHHiCP.jpg\r\n"]},"metadata":{},"sourceType":"module"}